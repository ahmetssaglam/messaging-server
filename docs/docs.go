// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/": {
            "get": {
                "description": "Returns a welcome message including the applicationâ€™s configured name.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Base"
                ],
                "summary": "Welcome message",
                "responses": {
                    "200": {
                        "description": "Welcome to App!"
                    }
                }
            }
        },
        "/api/v1/cron/control": {
            "post": {
                "description": "Start or stop the cron based on the \"action\" field.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cron"
                ],
                "summary": "Control cron job",
                "parameters": [
                    {
                        "description": "start or stop",
                        "name": "payload",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.CronRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Cron job started"
                    },
                    "202": {
                        "description": "Cron job will be stopped"
                    },
                    "400": {
                        "description": "Invalid request payload"
                    }
                }
            }
        },
        "/api/v1/list/sent-messages": {
            "get": {
                "description": "Retrieves all messages that have been sent.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Messages"
                ],
                "summary": "List sent messages",
                "responses": {
                    "200": {
                        "description": "Messages fetched successfully",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Message"
                            }
                        }
                    },
                    "500": {
                        "description": "failed to fetch messages"
                    }
                }
            }
        },
        "/health": {
            "get": {
                "description": "Simple endpoint to verify the service is running.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Base"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "Healthy!"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CronRequest": {
            "type": "object",
            "properties": {
                "action": {
                    "type": "string"
                }
            }
        },
        "models.Message": {
            "type": "object",
            "properties": {
                "content": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "isSent": {
                    "type": "boolean"
                },
                "phoneNumber": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
